{% extends 'base.html.twig' %}

{% block title %}: Timer{% endblock %}

{% block body %}

    <div class="timer-area">

        <div class="row g-0 align-items-center mb-0 pb-0">
            <div class="col-12 col-sm-6">
                <div>
                    <div class="timer-text text-center fw-bold">Timer</div>
                    <div class="round-break text-center fw-bold d-none">Take a Break</div>
                    <div class="rest text-center fw-bold d-none">Prepare</div>
                    <div class="workit text-center text-warning fw-bold d-none">Move</div>
                </div>

                <h1 id="segment-display" class="text-center counter mb-0 pb-0">00:00</h1>

                <p class="text-center fw-bold mt-0 mb-0 pb-0">
                    Time/Round: <span id="timer-display" class="text-center">00:00</span>
                    | Rounds Remaining: <span class="tabata-rounds">{{ workoutRounds }}</span>
                    <input type="hidden" name="tabata-rounds-counter" class="tabata-rounds-counter" value="{{ workoutRounds }}" />
                </p>
            </div>
            <div class="col-12 col-sm-6">
                <div class="px-5 mt-3 text-center text-nowrap action-btns">
                    <button class="rounded-circle bg-green-dark start-timer action-btn mb-3" title="Play"><i class="fa-solid fa-play"></i></button>
                    <button class="rounded-circle bg-orange-dark stop-timer action-btn mb-3" title="Pause"><i class="fa-solid fa-pause"></i></button>
                    <button class="rounded-circle bg-pink-dark heart-workout action-btn mb-3" title="Favorite"><i class="fa-{% if isFavorite %}solid{% else %}regular{% endif %} fa-heart"></i></button>
                    <button class="rounded-circle bg-dark-dark refresh-workout action-btn mb-3" title="Refresh Workout"><i class="fa-solid fa-arrows-rotate"></i></button>
                    <button class="rounded-circle bg-gray-dark settings-workout action-btn mb-3" title="Settings"><i class="fa-solid fa-gear"></i></button>

                    
                    <button class="rounded-circle bg-yellow-dark share-workout action-btn mb-3{% if isFavorite %}{% else %} d-none{% endif %}" title="Share"><i class="fa-solid fa-share"></i></button>
                </div>
            </div>
        </div>

        <div class="change-settings" style="display: none;">
            <form method="get" class="text-center p-5 pt-2 pb-4">
                <input type="hidden" name="routine_id" class="routine-id" value="{{ routineId }}" />
                <div class="row mb-0">
                    <div class="col-12 col-sm-6 mb-3">
                        <!-- <label class="fs-4">Time/Set<br /><span class="super-small">(seconds)</span></label> -->
                        <select class="form-control rounded setting" name="limit" id="limit">
                            {% for i in 2..100 %}
                                <option
                                    value="{{ i }}"
                                    {% if i == limit %} selected{% endif %}
                                >{{ i }} Exercises / Round</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 mb-3">
                        <!-- <label class="fs-4">Time/Set<br /><span class="super-small">(seconds)</span></label> -->
                        <select class="form-control rounded setting" name="length" id="length">
                            {% for i in 10..241 %}
                                <option
                                    value="{{ i }}"
                                    {% if i == workoutLength %} selected{% endif %}
                                >{{ i }} Seconds / Exercise</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 mb-3">
                        <!-- <label class="fs-4">Time/Break<br /><span class="super-small">(seconds)</span></label> -->
                        <select class="form-control rounded setting" name="break" id="break">
                            {% for i in 5..121 %}
                                <option
                                    value="{{ i }}"
                                    {% if i == workoutBreak %} selected{% endif %}
                            >{{ i }} Seconds / Break</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 mb-3">
                        <!-- <label class="fs-4">Time/Break<br /><span class="super-small">(seconds)</span></label> -->
                        <select class="form-control rounded setting" name="rounds" id="rounds">
                            {% for i in 1..10 %}
                                <option
                                        value="{{ i }}"
                                        {% if i == workoutRounds %} selected{% endif %}
                                >{{ i }} Tabata Round{% if i > 1 %}s{% endif %}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
{#                <div class="pt-0">#}
{#                    <div class="text-begin">#}
{#                        <input type="submit" name="update" value="Update" class="btn bg-blue-dark text-uppercase fs-6 rounded w-100 update-workout" />#}
{#                    </div>#}
{#                </div>#}
            </form>
        </div>
    </div>

    <div class="top-spacer">&nbsp;</div>

    <div class="list-group list-custom-small" id="workoutItems">
        {% for k, workout in workoutItems %}
        {% set key = k + 1 %}
        <div class="list-group-workout-item text-uppercase workout-{{ key }}" id="workout-{{ key }}" style="letter-spacing: 0px;">
            <div class="row px-3 py-0 py-sm-3 mb-0 border-bottom">
                <div class="col-7 col-md-9 text-start text-md-start exercise-name text-truncate">
                        <span class="item-key-{{ key }}">
                            <span class="set-key-text">{{ key }}</span>.&nbsp;
                        </span>
                    <span class="item-name item-name-{{ key }}">{{ workout['name'] }}</span>
                    <select
                            id="item-name-{{ key }}"
                            {# type="text" #}
                            class="d-none form-control edit-workout-name mt-1"
                            data-value="{{ workout['name'] }}"
                            name="item-name"
                            data-id="{{ workout['id'] }}"
                            data-key="{{ key }}"
                    >
                    </select>
                    <input type="hidden" class="item-id item-id-{{ key }}" value="{{ workout['id'] }}" />
                    <input type="hidden" class="item-key item-key-{{ key }}" value="{{ key }}" />
                </div>
                <div class="col-5 col-md-3 text-end text-md-end fs-6 text-nowrap exercise-btns">
                    <span><i class="w-action-btn fa-solid fa-arrows-rotate change-item" data-key="{{ key }}"></i></span>
                    <span><i class="w-action-btn fa-regular fa-pen-to-square edit-item edit-item-{{ key }}" data-key="{{ key }}"></i></span>
                    <span><i class="w-action-btn fa-solid fa-check color-green-light save-item save-item-{{ key }} d-none" data-key="{{ key }}"></i></span>
                    {# <span><i class="w-action-btn fa-sharp fa-solid fa-up-down sortable"></i></span> #}
                </div>
            </div>
        </div>
        {% endfor %}
    </div>


    <div class="modal fade" id="modalShareWorkout" tabindex="-1" aria-labelledby="modalShareWorkoutLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="modalShareWorkoutLabel">Share Workout Routine</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" value="https://mytabata.app/?routine_id={{ routineId }}" class="form-control text-dark" id="shareWorkoutUrl" />
                <div id="hasCopied" style="display: none;" class="alert alert-success mt-3 mb-0" role="alert">
                    COPIED =)
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
            </div>
        </div>
    </div>

{% endblock %}

{% block footer %}

    <!-- Sounds -->
    <audio id="reset" autoload="auto"><source src="/Assets/sounds/reset.mp3" type="audio/mpeg"></audio>
    <audio id="begin" autoload="auto"><source src="/Assets/sounds/begin.mp3" type="audio/mpeg"></audio>
    <audio id="countdown" autoload="auto"><source src="/Assets/sounds/countdown.mp3" type="audio/mpeg"></audio>
    <audio id="countdown_to_rest" autoload="auto"><source src="/Assets/sounds/countdown_to_rest_1.mp3" type="audio/mpeg"></audio>
    <audio id="complete" autoload="auto"><source src="/Assets/sounds/complete.mp3" type="audio/mpeg"></audio>
    <audio id="success" autoload="auto"><source src="/Assets/sounds/success.mp3" type="audio/mpeg"></audio>

{% endblock %}

{% block scripts %}
    <script>

        let createAccountMessage = "Create a free account to enjoy using this feature.";
        let activeItemClass  = "workout-item-active";
        let pendingItemClass = "workout-item-pending";
        let finishedItemClass = "workout-item-finished";

        let preWorkoutTimer = 10;
        let resetTimerCountdown = 0;
        let isPaused = false;
        let roundBreakTimer = 10;
        let workoutNumber = 0;
        let resetWorkoutNumber = 0;
        let justStarted = false;

        let defaultDuration = {{ timerInSeconds }};
        let duration = defaultDuration;
        let timer = duration, minutes, seconds;
        let display = $("#timer-display");
        let roundCounter = parseInt($(".tabata-rounds-counter").val());
        let roundCounterDisplay = $(".tabata-rounds");

        let defaultWorkoutDuration = {{ workoutLength }};
        let workoutDuration = defaultWorkoutDuration;
        let defaultBreakDuration = {{ workoutBreak }};
        let breakDuration = defaultBreakDuration;
        let sTimer = breakDuration, sMinutes, sSeconds;
        let sDisplay = $('#segment-display');

        let defaultWorkoutRounds = {{ workoutRounds }};
        let isExercising = false;
        let isResting = false;

        let sounds = {};

        // Start Tabata Round
        function startRound() {
            isExercising = true;
            isResting = false;
            sTimer = workoutDuration;

            updateWorkoutTimer();
            updateTotalTimer();
            
            var roundTimerID = setInterval(function () {
                if (!isPaused) {
                    --sTimer;
                    --timer;

                    if (timer < -1) {
                        alert('Something went wrong, please reload and try again.');
                        clearInterval(roundTimerID);
                        return false;
                    }
                    
                    updateTotalTimer();

                    if (isExercising) {
                        updateWorkoutTimer();
                    } else {
                        updateRestTimer();
                    }

                    // when round ends
                    if (timer < 1) {
                        clearInterval(roundTimerID);
                        checkForNextRound();
                        
                        return false;
                    }
                }
            }, 1000);
        }

        // Check for another round
        function checkForNextRound() {
            roundCounter--;
            if (roundCounter > 0) {
                roundCounterDisplay.text(roundCounter.toString());
                startRoundBreak();
            } else {
                workoutIsComplete();
            }
        }

        // Start the big break between rounds
        function startRoundBreak() {
            // reset all items so they look like they did when ths round first started
            duration = defaultDuration;
            workoutDuration = defaultWorkoutDuration;
            breakDuration = defaultBreakDuration;
            workoutNumber = 0;

            // reset timer
            timer = duration, minutes, seconds;
            sTimer = breakDuration, sMinutes, sSeconds;
            setTimersUI();

            $(".list-group-workout-item").removeClass(finishedItemClass).removeClass(activeItemClass);
            $(".rest").removeClass("d-none");
            $(".timer-text, .workit, .round-break").addClass("d-none");

            // scroll to top
            $("html, body").animate({ scrollTop: 0 }, 500);

            // show timer of break
            var breakSecondCounter = roundBreakTimer;

            updateTimerDisplayFromSeconds(breakSecondCounter);
            
            var breakTimerID = setInterval(function () {
                if (!isPaused) {

                    --breakSecondCounter;
                    updateTimerDisplayFromSeconds(breakSecondCounter);

                    if (breakSecondCounter == 3) {
                        playSound('countdown');
                    }

                    if (breakSecondCounter < 1) {
                        console.log('clear_break_timer', breakTimerID);

                        clearInterval(breakTimerID);
                        startRound();
                        return false;
                    }
                }
            }, 1000);
        }

        function updateWorkoutTimer() {
            // console.log('getting started ' + sTimer + ' = ' + workoutDuration);
            sDisplay.removeClass("text-secondary");
            // console.log('sTimer', sTimer);

            // just started
            if (sTimer == workoutDuration) {
                ++workoutNumber;

                // update timer text
                $(".rest, .round-break").addClass("d-none");
                $(".workit").removeClass("d-none");

                // show workout item as active
                $(".workout-" + workoutNumber)
                    .addClass(activeItemClass)
                    .removeClass(pendingItemClass);
            }

            // countdown tones
            if (sTimer == 3) {
                playSound('countdown_to_rest');
            }

            // update DOM
            if (sTimer > -1) {
                updateTimerDisplay();
            }

            // ending
            if (sTimer < 2) {
                toggleExerciseAndRest();

                setTimeout(function() {
                    $(".workout-" + workoutNumber)
                        .removeClass(activeItemClass)
                        .addClass(finishedItemClass);
                }, 1000);
            }
        }

        function updateRestTimer() {
            sDisplay.addClass("text-secondary");

            if (sTimer == breakDuration) {
                var nextWorkoutNumber = workoutNumber + 1;

                // scroll to workout item
                var offset = $(".top-spacer").height() + 75;
                $([document.documentElement, document.body]).animate({
                    scrollTop: $("#workout-" + nextWorkoutNumber).offset().top - offset
                }, 500);
                
                if (!$(".timer-text").hasClass("d-none")) {
                    $(".timer-text").addClass("d-none");
                }

                $(".rest").removeClass("d-none");
                $(".workit, .round-break").addClass("d-none");

                $(".workout-" + nextWorkoutNumber)
                    .addClass(pendingItemClass)
                    .removeClass(activeItemClass);

                $(".list-group-workout-item." + activeItemClass)
                    .removeClass(activeItemClass)
                    .addClass(finishedItemClass);
            }

            // countdown tones
            if (sTimer == 3) {
                playSound('countdown');
            }

            // update DOM
            if (sTimer > -1) {
                updateTimerDisplay();
            }

            // ending
            if (sTimer < 2) {
                toggleExerciseAndRest();
            }
        }

        function toggleExerciseAndRest() {
            isExercising = !isExercising;
            isResting = !isResting;

            // if isResting, check if this is the last exercise
            if (isResting) {
                var nextWorkoutNumber = workoutNumber + 1;
                if (!$(".workout-" + nextWorkoutNumber).attr('class')) {
                    isExercising = true;
                    return false;
                }
            }

            sTimer = isExercising ? workoutDuration : breakDuration;
            ++sTimer;
        }

        function updateTotalTimer() {
            minutes = calcSecondsToMinutes(timer);
            seconds = calcRemainingSecondsInMinute(timer);
            display.text(minutes + ":" + seconds);
        }

        function updateTimerDisplay() {
            updateTimerDisplayFromSeconds(sTimer);
        }

        function updateTimerDisplayFromSeconds(timerInSeconds)
        {
            sTimer = timerInSeconds;
            sMinutes = calcSecondsToMinutes(sTimer);
            sSeconds = calcRemainingSecondsInMinute(sTimer);
            sDisplay.text(sMinutes + ":" + sSeconds);
        }

        function setTimersUI() {
            beginMin = calcSecondsToMinutes(timer);
            beginSec = calcRemainingSecondsInMinute(timer);
            display.text(beginMin + ":" + beginSec);
        }

        function calcSecondsToMinutes(timeInSeconds) {
            var nowMinutes = parseInt(timeInSeconds / 60, 10);
            return nowMinutes < 10 ? "0" + nowMinutes : nowMinutes;
        }

        function calcRemainingSecondsInMinute(timeInSeconds) {
            var nowSeconds = parseInt(timeInSeconds % 60, 10);
            return nowSeconds < 10 ? "0" + nowSeconds : nowSeconds;
        }

        function workoutIsComplete() {
            stopSound('countdown_to_rest');
            playSound('success');
            resetWorkout();
        }

        function resetWorkout() {
            timer = 0;
            isPaused = false;
            
            // scroll to top
            $("html, body").animate({ scrollTop: 0 }, 500);

            setTimeout(function() {
                playSound('reset');
                duration = defaultDuration;
                workoutDuration = defaultWorkoutDuration;
                breakDuration = defaultBreakDuration;
                workoutNumber = 0;

                timer = duration, minutes, seconds;
                sTimer = breakDuration, sMinutes, sSeconds;

                $(".tabata-rounds").text({{ workoutRounds }});
                $(".tabata-rounds-counter").val({{ workoutRounds }});

                $(".start-timer").removeClass("show-disabled").prop('disabled', false);
                $(".timer-text").removeClass("d-none");
                $(".rest, .workit, .round-break").addClass("d-none");
                $('body').removeClass("is-playing");

                resetTimerCountdown = 10;
                resetItems();
                resetTimersUI();
            }, 3000);
        }

        function resetTimersUI() {

            let time = '0';
            
            switch (resetTimerCountdown) {
                case 10:
                    time = '12:59';
                    break;
                case 9:
                    time = '31:23';
                    break;
                case 8:
                    time = '04:07';
                    break;
                case 7:
                    time = '54:97';
                    break;
                case 6:
                    time = '23:17';
                    break;
                case 5:
                    time = '45:26';
                    break;
                case 4:
                    time = '71:82';
                    break;
                case 3:
                    time = '71:82';
                    break;
                case 2:
                    time = '71:82';
                    break;
                case 1:
                    time = '71:82';
                    break;
            }

            --resetTimerCountdown;

            if (resetTimerCountdown > 0) {
                display.text(time);

                setTimeout(function() {
                    resetTimersUI();
                }, 40);

                return;
            }

            setTimersUI();
        }

        function resetItems() {
            ++resetWorkoutNumber;

            if ($(".workout-" + resetWorkoutNumber).hasClass(finishedItemClass)) {
                $(".workout-" + resetWorkoutNumber).removeClass(finishedItemClass).removeClass(activeItemClass).removeClass(pendingItemClass);

                setTimeout(function() {
                    resetItems();
                }, 100);

                return;
            }
            
            resetWorkoutNumber = 0;
        }

        function playSound(soundID, muted) {
            if (typeof muted == 'undefined') {
                muted = false;
            }

            if (sounds[soundID]) {
                var audio = sounds[soundID];
            } else {
                var audio = document.getElementById(soundID);
                sounds[soundID] = audio;
            }

            if (muted) {
                audio.muted = true;
            } else {
                if (audio.muted) {
                    audio.muted = false;
                }
            }

            audio.play();
        }

        function stopSound(soundID) {
            var audio = sounds[soundID];
                audio.pause();
                audio.currentTime = 0;
        }

        function playAllSounds() {
            // this is to give us access to
            // auto play the remaining sounds
            // playSound('countdown', true);
            // playSound('countdown_to_rest', true);
            // playSound('beep1', true);
            // playSound('beep2', true);
            // playSound('beep3', true);
            // playSound('complete', true);
            playSound('reset', true);
            playSound('success', true);
        }

        function addNewExerciseItem(key, item) {
            let item_html = '<div class="list-group-workout-item text-uppercase workout-'+key+'" id="workout-'+key+'" style="letter-spacing: 0px;">';
                item_html += '  <div class="row px-3 py-0 py-sm-3 mb-0 border-bottom">';
                item_html += '      <div class="col-7 col-md-9 text-start text-md-start exercise-name text-truncate">';
                item_html += '          <span class="item-key-'+key+'">';
                item_html += '          <span class="set-key-text">'+key+'</span>.&nbsp;</span>';
                item_html += '          <span class="item-name item-name-'+key+'">'+item.name+'</span>';
                item_html += '          <input id="item-name-'+key+'" type="text" class="d-none form-control edit-workout-name mt-1" value="'+item.name+'" name="item-name" data-id="'+item.id+'" data-key="'+key+'" />';
                item_html += '          <input type="hidden" class="item-id item-id-'+key+'" value="'+item.id+'" />';
                item_html += '          <input type="hidden" class="item-key item-key-'+key+'" value="'+key+'" />';
                item_html += '      </div>';
                item_html += '      <div class="col-5 col-md-3 text-end text-md-end fs-6 text-nowrap exercise-btns">';
                item_html += '          <span><i class="w-action-btn fa-solid fa-arrows-rotate change-item" data-key="'+key+'"></i></span>';
                item_html += '          <span><i class="w-action-btn fa-regular fa-pen-to-square edit-item edit-item-'+key+'" data-key="'+key+'"></i></span>';
                item_html += '          <span><i class="w-action-btn fa-solid fa-check color-green-light save-item save-item-'+key+' d-none" data-key="'+key+'"></i></span>';
                item_html += '          <span><i class="w-action-btn fa-sharp fa-solid fa-up-down sortable"></i></span>';
                item_html += '      </div>';
                item_html += '  </div>';
                item_html += '</div>';

            $(".list-group").append(item_html);
        }





        $(".start-timer").click(function() {
            // stop user from initiating multiple times
            $(this).attr("disabled", true).addClass("show-disabled");
            $('body').addClass("is-playing");

            $(".rest").removeClass("d-none");
            $(".timer-text, .workit, .round-break").addClass("d-none");

            // set first item as pending
            $(".workout-1").addClass(pendingItemClass);
            $("html, body").animate({ scrollTop: 0 }, 500);

            // hack to give permission to play sounds
            playAllSounds();

            // sound to notify user timer has started
            playSound('begin');

            // show pre-workout timer
            countdown = preWorkoutTimer;
            updateTimerDisplayFromSeconds(countdown);

            var countdownInterval = setInterval(function() {
                countdown--;
                
                if (countdown == 3) {
                    playSound('countdown');
                }

                updateTimerDisplayFromSeconds(countdown);
                
                if (countdown < 1) {
                    clearInterval(countdownInterval);
                    startRound();
                    return false;
                }
            }, 1000);
        });

        if ($("#workoutItems").hasClass("list-group")) {
            Sortable.create(workoutItems, {
                handle: '.sortable',
                animation: 250,
                dragClass: 'is-sorting',
                dragoverBubble: true,
                onUpdate: function () {
                    let routine_id = $(".routine-id").val();

                    let workout_items = [];
                    let new_key = 0;

                    $(".list-group-workout-item").each(function () {
                        let item_id = $(this).find(".item-id").val();
                        let item_name = $(this).find("span.item-name").text();
                        let current_key = $(this).find(".item-key").val();

                        // update key
                        ++new_key;
                        $(this).find(".item-key").val(new_key);
                        $(this).attr("id", "workout-" + new_key).removeClass("workout-" + current_key).addClass("workout-" + new_key);
                        $(this).find(".set-key-text").text(new_key);
                        $(this).find(".item-name").removeClass("item-name-" + current_key).addClass("item-name-" + new_key);
                        $(this).find('input').attr("id", "item-name-" + new_key).attr("data-key", new_key);
                        $(this).find('.change-item').attr("data-key", new_key);
                        $(this).find('.edit-item').removeClass("edit-item-" + current_key).addClass("edit-item-" + new_key).attr("data-key", new_key);
                        $(this).find('.save-item').removeClass("save-item-" + current_key).addClass("save-item-" + new_key).attr("data-key", new_key);

                        workout_items.push({
                            id: item_id,
                            name: item_name
                        });
                    });

                    if (!routine_id || routine_id < 1) {
                        return false;
                    }

                    $.post({
                        type: "POST",
                        url: "/ajax/save_routine_order",
                        data: {
                            routine_id: routine_id,
                            items: workout_items
                        },
                        success: function (result) {

                        }
                    });
                }
            });
        }

        $(".share-workout").click(function() {
            // open bootstrap modal with url of workout
            $("#modalShareWorkout").modal("show");
        });

        $('#shareWorkoutUrl').on('focus', function() {
            $(this).select();
            document.execCommand('copy');
            $("#hasCopied").show();
            setTimeout(function() {
                $("#hasCopied").hide();
            }, 2000);
        });

        $(".stop-timer").click(function() {
            $('body').removeClass("is-playing");
            isPaused = true;
            $(".start-timer").attr("disabled", false).removeClass("show-disabled");
        });

        $("body").on('click', '.change-item', function() {
            let routine_id = $(".routine-id").val();
            let key = $(this).parent("span").parent("div").parent("div").find(".item-key").val();
            let id = $(".item-id-" + key).val();

            $(this).addClass("changing").prop("disabled", true);

            $.post({
                url: "/ajax/change_exercise",
                data: {
                    exercise_id: id,
                    routine_id: routine_id
                },
                success: function (result) {
                    $(".item-name-" + key).text(result.name);
                    $(".item-id-" + key).val(result.id);
                    $("#item-name-" + key).val(result.name).attr("data-id", result.id).attr("data-value", result.name);
                    $("#item-name-" + key).html('<option value="' + result.name +'">' + result.name + '</option>');
                    $(".changing").prop("disabled", false).removeClass("changing");
                }
            });
        });

        $(".refresh-workout").click(function() {
            window.open("/","_self");
        });

        $(".heart-workout").click(function() {
            let routine_id = $(".routine-id").val();
            let workout_items = [];

            if (routine_id && $(this).find("i").hasClass("fa-solid")) {
                // remove heart
                $(".heart-workout").find("i").addClass("fa-regular").removeClass("fa-solid");

                // hide share
                $(".share-workout").addClass('d-none');

                // remove from db
                $.post({
                    type: "POST",
                    url: "/ajax/unheart_routine",
                    data: {
                        routine_id: routine_id
                    },
                    success: function (result) {
                        // update the ID
                        $(".routine-id").val("");
                    }
                });
            } else {
                $(".heart-workout").find("i").removeClass("fa-regular").addClass("fa-solid");
                $(".share-workout").removeClass('d-none');
                let limit = $("#limit").val();
                let set_length = $("#length").val();
                let set_break = $("#break").val();
                let rounds = $("#rounds").val();

                $(".list-group-workout-item").each(function () {
                    let item_id = $(this).find(".edit-workout-name").attr("data-id");
                    let item_name = $(this).find("span.item-name").text();

                    workout_items.push({
                        id: item_id,
                        name: item_name
                    });
                });

                $.post({
                    type: "POST",
                    url: "/ajax/heart_routine",
                    data: {
                        routine_id: routine_id,
                        items: workout_items,
                        limit: limit,
                        set_length: set_length,
                        set_break: set_break,
                        rounds: rounds
                    },
                    success: function (result) {
                        // update the ID
                        if (result.status == 'access denied') {
                            $(".heart-workout").find("i").addClass("fa-regular").removeClass("fa-solid");
                            alert(createAccountMessage);
                        } else {
                            $(".routine-id").val(result.routine_id);
                            // update url of share workout
                            $("#shareWorkoutUrl").val(window.location.href + "?routine_id=" + result.routine_id);
                        }
                    }
                });
            }
        });

        $(".settings-workout").click(function() {
            $(".change-settings").slideToggle(250);
        });

        $(".setting").change(function() {
            let routine_id = $(".routine-id").val();
            let sets = $("#limit").val();
            let sets_time = $("#length").val();
            let break_time = $("#break").val();
            let rounds = $("#rounds").val();
            let workout_items = [];
            let item_counter = 0;

            $(".list-group-workout-item").each(function () {
                ++item_counter;
                let item_id = $(this).find(".edit-workout-name").attr("data-id");
                let item_name = $(this).find("span.item-name").text();

                if (item_counter > sets) {
                    $(this).remove();
                    // return false;
                } else {
                    workout_items.push({
                        id: item_id,
                        name: item_name
                    });
                }
            });

            $.post({
                type: "POST",
                url: "/ajax/update_routine_settings",
                data: {
                    routine_id: routine_id,
                    sets: sets,
                    sets_time: sets_time,
                    break_time: break_time,
                    rounds: rounds,
                    workout_items: workout_items,
                },
                success: function (result) {
                    roundCounter = parseInt(result.rounds);
                    roundCounterDisplay.text(result.rounds);
                    timer = duration = result.timer_in_seconds;
                    workoutDuration = result.sets_time;
                    sTimer = breakDuration = result.break_time;

                    let current_total_items = workout_items.length;
                    let new_total_items = result.new_items.length;

                    if (new_total_items > 0) {
                        for (let i = 0; i < result.new_items.length; i++) {
                            ++current_total_items;
                            // add to UI
                            addNewExerciseItem(
                                current_total_items,
                                result.new_items[i]
                            );
                        }
                    }

                    setTimersUI();
                }
            });
        });

        setTimersUI();

        {% if USER.id %}
            $("body").on("click", ".edit-item", function() {
                let key = $(this).parent("span").parent("div").parent("div").find(".item-key").val();
                $(".item-name-" + key).addClass("d-none");
                $(".item-key-" + key).addClass("d-none");
                $("#item-name-" + key).removeClass("d-none");
                $(this).parents('.exercise-btns').find('.w-action-btn').addClass('d-none');
                // $(this).addClass("d-none");
                let defaultValue = $("#item-name-" + key).attr('data-value');
                // $(".save-item-" + key).removeClass("d-none");
                $("#item-name-" + key).html('<option value="' + defaultValue +'">' + defaultValue + '</option>');
                // $("#item-name-" + key).focus();
                $("#item-name-" + key).select2({
                    tags: true,
                    ajax: {
                        url: '/ajax/list/exercises',
                        dataType: 'json',
                        processResults: function(data) {
                            return {
                                results: data
                            };
                        },
                        cache: true
                    }
                });
                $("#item-name-" + key).select2('open');

                $(".select2-search__field[aria-controls='select2-item-name-" + key + "-results']").each(
                    function(key, value) {
                        value.focus();
                        // value.value = defaultValue;
                    }
                );

                $("#item-name-" + key).trigger('change');

                $("#item-name-" + key).on('select2:closing', function (e) {
                    resetItem(key);
                });

                $("#item-name-" + key).on('select2:select', function (e) {
                    var selectedData = e.params.data;

                    if (selectedData && selectedData.id) {
                        saveNewWorkout(selectedData.text, key, selectedData.id);
                    }
                });

            });
        {% else %}
            $("body").on("click", ".edit-item", function() {
                alert(createAccountMessage);
                return false;
            });
        {% endif %}

        function saveNewWorkout(name, key, id) {
            let routine_id = $(".routine-id").val();
            $("#item-name-" + key).attr('data-value', name);

            resetItem(key);

            $.post({
                type: "POST",
                url: "/ajax/edit_exercise",
                data: {
                    id: id,
                    name: name,
                    routine_id: routine_id,
                    save: false,
                },
                success: function (result) {
                    $(".item-name-" + key).text(result.name);
                    $("#item-name-" + key).val(result.name).attr("data-id", result.id);
                    $(".item-id-" + key).val(result.id);
                }
            });
        }

        function resetItem(key) {
            setTimeout(function() {
                var isSelect2Instantiated = $("#item-name-" + key).data('select2') !== undefined;

                // Check the result
                if (!isSelect2Instantiated) {
                    return false;
                }

                $("#item-name-" + key).select2('destroy');
                $("#item-name-" + key).off('select2:select');
                $("#item-name-" + key).off('select2:close');
            }, 250);

            $(".item-name-" + key).removeClass("d-none");
            $(".item-key-" + key).removeClass("d-none");
            $("#item-name-" + key).addClass("d-none");

            $(".edit-item-" + key).parents('.exercise-btns').find('.w-action-btn').removeClass("d-none");
            $(".save-item-" + key).addClass("d-none");
        }

        {# $("body").on("blur", ".edit-workout-name", function() {
            let name = $(this).val();
            let key = $(this).parent("div").find(".item-key").val();
            let id = $(this).parent("div").find(".item-id").val();
            saveNewWorkout(name, key, id);
        }); #}
    </script>
{% endblock %}